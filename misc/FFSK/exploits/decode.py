"""
Decode a wav file using a Goertzel filter.
"""

from goertzel import Goertzel
import numpy as np
import os
from scipy.io import wavfile

DATA = os.path.dirname(os.path.abspath(__file__))
filepath = os.path.join(DATA, "aaa.wav")

# Read sample rate and data from audio file
rate, data = wavfile.read(filepath)


message = ''
bit_string = ''
mark_freq = 2225
space_freq = 2025
mark_filter = Goertzel(rate, mark_freq)
space_filter = Goertzel(rate, space_freq)

# calculate coefficients for each filter
mark_filter.calculate_coeff()
space_filter.calculate_coeff()

for i in range(data.size + 1):

    # for each chunk of 160 samples
    if i%160 == 0 and i != 0:
        start = i - 160
        end = i
        samples = data[start:end]

        # get amplitutes of sample set
        mark_amp = mark_filter.filter(samples)
        space_amp = space_filter.filter(samples)

        if mark_amp > space_amp:
            # bit is 1
            to_add = '1'
        else:
            # bit is zero
            to_add = '0'
        bit_string = to_add + bit_string

for x in range(10, len(bit_string)+10):
    if x%10 == 0:
        start = x - 9
        end = x - 1
        message = chr(int(bit_string[start:end],2)) + message
print(message)


# set target frequencies
mark_freq = 1270
space_freq = 1070

# create two filters
mark_filter = Goertzel(rate, mark_freq)
space_filter = Goertzel(rate, space_freq)

# calculate coefficients for each filter
mark_filter.calculate_coeff()
space_filter.calculate_coeff()

bit_string = ''
message = ''
for i in range(data.size + 1):

    # for each chunk of 160 samples
    if i%160 == 0 and i != 0:
        start = i - 160
        end = i
        samples = data[start:end]

        # get amplitutes of sample set
        mark_amp = mark_filter.filter(samples)
        space_amp = space_filter.filter(samples)

        if mark_amp > space_amp:
            # bit is 1
            to_add = '1'
        else:
            # bit is zero
            to_add = '0'
        bit_string = to_add + bit_string

def HammingBolck(message):
    assert(len(message)==15)
    message=message[::-1]
    code = 0
    m_pos = 0
    for ind in range(20):
        if (ind+1)&(ind): # Not parity check bit
            if int(message[m_pos],2):
                code = code ^ (1<<ind)
                code = code ^ (((ind+1)&0b1)<<0)
                code = code ^ (((ind+1)&0b10)<<0)
                code = code ^ (((ind+1)&0b100)<<1)
                code = code ^ (((ind+1)&0b1000)<<4)
            m_pos = m_pos + 1

    code = code ^ (1<<random.randint(0,19))

    retStr = "{0:020b}".format(code)
    print("from "+message+" to "+retStr)
    
    return retStr

def HammingBolckInv(message):
    assert(len(message)==20)
    code = int(message,2)
    wrong = 0
    for ind in range(20):
        if (1<<ind)&code:
            wrong = wrong ^ (ind+1)
    if wrong:
        code = code ^ (1<<(wrong-1))
    retStr = ""
    for ind in range(20):
        if (ind+1)&(ind): # Not parity check bit
            retStr = retStr + ("1" if code&(1<<ind) else "0")
    # print("recover"+retStr)
    return retStr[::-1]

def Hamming(message):
    retStr = ""
    for ind in range(0,len(message),15):
        retStr = retStr + HammingBolck(message[ind:ind+15])
    return retStr

def HammingInv(message):
    retStr = ""
    for ind in range(0,len(message),20):
        retStr = retStr + HammingBolckInv(message[ind:ind+20])
    return retStr

def manchester(message):
    retStr = ""
    for char in message:
        retStr += "01" if char=='1' else "10"
    return retStr
def manchesterInv(message):
    retStr = ""
    for ind in range(0, len(message), 2):
        char = message[ind]
        retStr += "0" if char=='1' else "1"
    return retStr


bit_string=bit_string[::-1]
# print(bit_string)
# print(manchesterInv(bit_string))
# print(HammingInv(manchesterInv(bit_string)))
bit_string = HammingInv(manchesterInv(bit_string))[::-1]

for x in range(10, len(bit_string)+10):
    if x%10 == 0:
        start = x - 9
        end = x - 1
        message = chr(int(bit_string[start:end],2)) + message
print(message)

