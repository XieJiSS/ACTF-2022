from ntpath import join
import socket
import json
from util import Message
import threading
import os

server = ('127.0.0.1', 1018)
client = ('127.0.0.1', 1019)
s  = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
c  = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.connect(server)
c.connect(client)

def recv_packets(s:socket) -> list:
    t = s.recv(0xffff)
    ans = []
    while t != b'':
        length = int.from_bytes(t[0:4],'little')
        t = t[4:]
        obj = json.loads(t[0:length])
        t = t[length:]
        ans.append(obj)
    return ans

def send_packet(s:socket,data:dict):
    payload = json.dumps(data).encode('utf-8')
    payload = len(payload).to_bytes(4,'little')+payload
    s.send(payload)

cipher = {}
def server_echo():
    while True:
        data = recv_packets(s)
        if [] == data:
            s.close()
            print("Server disconnect.")
            with open('cipher.txt','w') as f:
                json.dump(cipher,f)
            os._exit(0)
        print("server to client: ")
        for d in data:
            print('\t',d)
            send_packet(c,d)
thred = threading.Thread(target=server_echo)
thred.start()


try:
    while True:
        data = recv_packets(c)
        for d in data:
            if(type(d["Message"]) is str and "Complete" in d["Message"]):
                cnt = 0 
                continue
            if 'step' in d["type"]:
                print("client to server: ")
                for d in data:
                    print('\t',d)
                    send_packet(s,d)
            elif 'data' == d["type"]:
                for d in data:
                    if cnt not in cipher:
                        cipher[cnt] = []
                    cipher[cnt].append(d["Message"])
                    if(cnt ==0):
                        print('\t',cnt,d)
                    cnt +=1
except:
    with open('cipher.txt','w') as f:
        json.dump(cipher,f)