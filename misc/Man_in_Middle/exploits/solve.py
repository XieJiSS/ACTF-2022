import base64
from email.mime import base
import json
from string import printable
from tokenize import group
from turtle import pos

with open('cipher.txt','r') as f:
    ciphers = json.load(f)

def xor(a,b):
    return bytes([a[i]^b[i] for i in range(16)])

# for idx in ciphers:
idx = '0'
key = [list(range(256)) for _ in range(16)]
for cipher in ciphers[idx]:
    cipher = base64.b64decode(cipher)
    for ci in range(16):
        tmp = key[ci].copy()
        for k in tmp:
            if(chr(k^cipher[ci]) not in printable):
                key[ci].remove(k)
print([bytes(i) for i in key])


real_key = [b'\x95\xfa\xbd\x9b\xc1\x80L\xcey\xc0I\xb9\xcc]\xa3\xbf', b'\xe7`@\x91g\xcaIla\x83\xf5\xdc\x83\xac\x9d\x03']
for cipher in ciphers[idx]:
    cipher = base64.b64decode(cipher)
    key = real_key[int(idx)]
    print(xor(key,cipher))

# def dec_one(m:dict,a,b):
#     c = xor(a,b)
#     for _ in range(16):
#         candidate = m[a][_]
#         for i in candidate:
#             flag =   False
#             for j in m[b][_]:
#                 if(i^j==c[_]):
#                     flag = True
#                     break 
#             if flag == False:
#                 m[a][_] = m[a][_].replace(bytes([i]),b'')

# m = {}
# for a in group0:
#     m[a]  = [printable.encode()] * 16
# for a in group0:
#     for b in group0:
#         if a!=b:
#             dec_one(m,a,b)
# print(m[group0[0]])


            
